<?php

function webcomic_toolkit_menu() {
    $items = array();

    $items['comic/last'] = array(
        'page callback' => 'load_page',
        'page arguments' => array('latest'),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
     );

    $items['comic/%/%'] = array(
        'page callback' => 'load_page',
        'page arguments' => array('page', 1, 2),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['comic/first'] = array(
        'page callback' => 'load_page',
        'page arguments' => array('first'),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Implements hook_theme_registry_alter().
 */
function webcomic_toolkit_theme_registry_alter(&$theme_registry) {
    // Defined path to the current module.
    $module_path = drupal_get_path('module', 'webcomic_toolkit');
    // Find all .tpl.php files in this module's folder recursively.
    $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
    // Iterate through all found template file objects.
    foreach ($template_file_objects as $key => $template_file_object) {
        // If the template has not already been overridden by a theme.
        if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
            // Alter the theme path and template elements.
            $theme_registry[$key]['theme path'] = $module_path;
            $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
            $theme_registry[$key]['type'] = 'module';
        }
    }
}

function webcomic_toolkit_form_alter(&$form, &$form_state, $form_id) {
    $index = get_comic_index();
    end($index);
    $chapter = key($index);
    reset($index);
    end($index[$chapter]);
    $page = key($index[$chapter]);
    reset($index[$chapter]);

    switch($form_id) {
        case 'comic_page_node_form':
            $form["field_comic_page_chapter"]["und"][0]["value"]["#default_value"] = $chapter;
            $form["field_comic_page_number"]["und"][0]["value"]["#default_value"] = $page + 1;
        break;
    }
}

function load_page($type, $chapter = NULL, $page = NULL) {
    $query = new EntityFieldQuery();
    if($type == 'page') {
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'comic_page')
            ->fieldCondition('field_comic_page_chapter', 'value', $chapter, '=')
            ->fieldCondition('field_comic_page_number', 'value', $page, '=')
            ->fieldOrderBy('field_comic_page_chapter', 'value')
            ->fieldOrderBy('field_comic_page_number', 'value')
            ->range(0,1);
             
    }
    else if($type == 'latest') {
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'comic_page')
            ->fieldOrderBy('field_comic_page_chapter', 'value', 'DESC')
            ->fieldOrderBy('field_comic_page_number', 'value', 'DESC')
            ->range(0,1);
        $result = $query->execute();
    }
    else if($type == 'first') {
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'comic_page')
            ->fieldOrderBy('field_comic_page_chapter', 'value', 'ASC')
            ->fieldOrderBy('field_comic_page_number', 'value', 'ASC')
            ->range(0,1);
        $result = $query->execute();
    }
        $result = $query->execute(); 
        $nid = current(array_keys($result['node']));
        $page_node = node_load($nid);
        $page_view = node_view($page_node);
        $page_view['comments'] = comment_node_page_additions($page_node);
        $links = get_comic_nav_links($page_node, $type);
        $page_view['nav_links'] = $links;
        $rendered_node = drupal_render($page_view);

        return $rendered_node;
}

function get_comic_nav_links($node, $type) {
    $page_number = $node->field_comic_page_number['und'][0]['value'];
    $page_chapter = $node->field_comic_page_chapter['und'][0]['value'];

    $comic_index = get_comic_index();

    $links = array("next" => NULL, "prev" => NULL);

    if($type != 'first') {
        $links['prev'] = check_prev($page_chapter, $page_number, $comic_index);
    }
    if($type != 'latest') {
        $links['next'] = check_next($page_chapter, $page_number, $comic_index);
    }

    $render = array();
    if($links['prev']) {
        $render[] = array(
            '#theme' => 'link',
            '#text' => 'First',
            '#path' => 'comic/first',
            '#options' => array(
                'attributes' => array('class' => array('first', 'left')),
                'html' => TRUE,
                ),
        );
        $render[] = array(
            '#theme' => 'link',
            '#text' => 'Previous',
            '#path' => 'comic/' . $links['prev'],
            '#options' => array(
                'attributes' => array('class' => array('prev', 'left')),
                'html' => TRUE,
                ),
        );
    }
    if($links['next']) {
        $render[] = array(
            '#theme' => 'link',
            '#text' => 'Last',
            '#path' => 'comic/last',
            '#options' => array(
                'attributes' => array('class' => array('last', 'right')),
                'html' => TRUE,
                ),
        );
        $render[] = array(
            '#theme' => 'link',
            '#text' => 'Next',
            '#path' => 'comic/' . $links['next'],
            '#options' => array(
                'attributes' => array('class' => array('next', 'right')),
                'html' => TRUE,
                ),
        );
    }
    return $render;
}

function get_comic_index() {
    $query = db_select('field_data_field_comic_page_chapter', 'chapter');
    $query->addField('chapter', 'field_comic_page_chapter_value', 'chapter_number');
    $query->addField('page', 'field_comic_page_number_value', 'page_number');
    $query->addField('chapter', 'entity_id');
    $query->condition('chapter.deleted', 0, '=');
    $query->condition('page.deleted', 0, '=');
    $query->addJoin('INNER', 'field_data_field_comic_page_number', 'page', 'chapter.entity_id = page.entity_id');

    $result = $query->execute();

    $result = $result->fetchAllAssoc('entity_id');
    
    $comic_index = array();
    foreach($result as $comic_row) {
        $comic_index[$comic_row->chapter_number][$comic_row->page_number] = $comic_row->entity_id;
    }
    return($comic_index);
}

function check_prev($chapter, $page, $comic_index) {
    if(isset($comic_index[$chapter]) && isset($comic_index[$chapter][$page - 1])) {
        $page = $page - 1;
        return $chapter . '/' . $page;
    }
    else if(($chapter - 1) > 0 && isset($comic_index[$chapter - 1])) {
        end($comic_index[$chapter - 1]);
        $page = key($comic_index[$chapter - 1]);
        reset($comic_index[$chapter - 1]);
        $chapter = $chapter - 1;

        return $chapter . '/' . $page;
    }
    else {
        return NULL;
    }
}

function check_next($chapter, $page, $comic_index) {
    if(isset($comic_index[$chapter]) && isset($comic_index[$chapter][$page + 1])) {
        $page = $page + 1;
        return $chapter . '/' . $page;
    }
    else if(isset($comic_index[$chapter + 1])) {
        reset($comic_index[$chapter + 1]);
        $page = key($comic_index[$chapter + 1]);
        $chapter = $chapter + 1;

        return $chapter . '/' . $page;
    }
    else {
        return NULL;
    }
}